Token: Separator	Lexeme: $$
<Rat20SU>  =>   $$  <Opt Declaration List>    <Statement List> $$ 
<Opt Declaration List> => <Empty>
Token: Identifier	Lexeme: int
<Statement List> -> <Statement> <Statement List Prime>
Token: Identifier	Lexeme: int
<Statement> -> <Assign>>
<Assign> -> <Identifier> = <Expression> ;
Token: Identifier	Lexeme: m
Error: '=' expected
Token: Identifier	Lexeme: m
<StatementListPrime> -> <StatementList>
Token: Identifier	Lexeme: m
<Statement List> -> <Statement> <Statement List Prime>
Token: Identifier	Lexeme: m
<Statement> -> <Assign>>
<Assign> -> <Identifier> = <Expression> ;
Token: Operator  	Lexeme: =
Token: Integer	Lexeme: 2
Token: Integer	Lexeme: 2
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> <Primary>
<Primary> -> <Integer>
Integer detected
Token: Integer	Lexeme: 2
<Term Prime> -> Epsilon
Token: Separator	Lexeme: ;
<Expression Prime> -> Epsilon
Token: Separator	Lexeme: ;
Token: Identifier	Lexeme: int
<StatementListPrime> -> <StatementList>
Token: Identifier	Lexeme: int
<Statement List> -> <Statement> <Statement List Prime>
Token: Identifier	Lexeme: int
<Statement> -> <Assign>>
<Assign> -> <Identifier> = <Expression> ;
Token: Identifier	Lexeme: x
Error: '=' expected
Token: Identifier	Lexeme: x
<StatementListPrime> -> <StatementList>
Token: Identifier	Lexeme: x
<Statement List> -> <Statement> <Statement List Prime>
Token: Identifier	Lexeme: x
<Statement> -> <Assign>>
<Assign> -> <Identifier> = <Expression> ;
Token: Operator  	Lexeme: =
Token: Integer	Lexeme: 3
Token: Integer	Lexeme: 3
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> <Primary>
<Primary> -> <Integer>
Integer detected
Token: Integer	Lexeme: 3
<Term Prime> -> Epsilon
Token: Separator	Lexeme: ;
<Expression Prime> -> Epsilon
Token: Separator	Lexeme: ;
Token: Identifier	Lexeme: int
<StatementListPrime> -> <StatementList>
Token: Identifier	Lexeme: int
<Statement List> -> <Statement> <Statement List Prime>
Token: Identifier	Lexeme: int
<Statement> -> <Assign>>
<Assign> -> <Identifier> = <Expression> ;
Token: Identifier	Lexeme: b
Error: '=' expected
Token: Identifier	Lexeme: b
<StatementListPrime> -> <StatementList>
Token: Identifier	Lexeme: b
<Statement List> -> <Statement> <Statement List Prime>
Token: Identifier	Lexeme: b
<Statement> -> <Assign>>
<Assign> -> <Identifier> = <Expression> ;
Token: Operator  	Lexeme: =
Token: Integer	Lexeme: 4
Token: Integer	Lexeme: 4
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> <Primary>
<Primary> -> <Integer>
Integer detected
Token: Integer	Lexeme: 4
<Term Prime> -> Epsilon
Token: Separator	Lexeme: ;
<Expression Prime> -> Epsilon
Token: Separator	Lexeme: ;
Token: Identifier	Lexeme: int
<StatementListPrime> -> <StatementList>
Token: Identifier	Lexeme: int
<Statement List> -> <Statement> <Statement List Prime>
Token: Identifier	Lexeme: int
<Statement> -> <Assign>>
<Assign> -> <Identifier> = <Expression> ;
Token: Identifier	Lexeme: y
Error: '=' expected
Token: Identifier	Lexeme: y
<StatementListPrime> -> <StatementList>
Token: Identifier	Lexeme: y
<Statement List> -> <Statement> <Statement List Prime>
Token: Identifier	Lexeme: y
<Statement> -> <Assign>>
<Assign> -> <Identifier> = <Expression> ;
Token: Operator  	Lexeme: =
Token: Identifier	Lexeme: m
Token: Identifier	Lexeme: m
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> <Primary>
<Primary> -> <Identifier>
Identifier Token: Identifier	Lexeme: m
<Term Prime> -> * <Factor> <Term Prime>
Token: Identifier	Lexeme: x
<Factor> -> <Primary>
<Primary> -> <Identifier>
Identifier Token: Identifier	Lexeme: x
<Term Prime> -> Epsilon
Token: Operator  	Lexeme: +
<Expression Prime>-> + <Term> <Expression Prime>
Token: Identifier	Lexeme: b
<Term> -> <Factor> <Term Prime>
<Factor> -> <Primary>
<Primary> -> <Identifier>
Identifier Token: Identifier	Lexeme: b
<Term Prime> -> Epsilon
Token: Separator	Lexeme: ;
<Expression Prime> -> Epsilon
Token: Separator	Lexeme: ;
<Statement List Prime> -> Epsilon
Token: Separator	Lexeme: $$
End of file.
