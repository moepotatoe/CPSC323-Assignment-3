Token:  Keyword         Lexeme: int
Token:  Identifier      Lexeme: i_i
Token:  Separator       Lexeme: ;
Token:  Keyword         Lexeme: int
Token:  Identifier      Lexeme: max
Token:  Separator       Lexeme: ;
Token:  Keyword         Lexeme: int
Token:  Identifier      Lexeme: sum
Token:  Separator       Lexeme: ;
Token:  Identifier      Lexeme: sum
Token:  Operator        Lexeme: =
Token:  Integer         Lexeme: 0
Token:  Separator       Lexeme: ;
Token:  Identifier      Lexeme: i
Token:  Operator        Lexeme: =
Token:  Integer         Lexeme: 1
Token:  Separator       Lexeme: ;
Token:  Keyword         Lexeme: get
Token:  Separator       Lexeme: (
Token:  Identifier      Lexeme: max
Token:  Separator       Lexeme: )
Token:  Separator       Lexeme: ;
Token:  Keyword         Lexeme: while
Token:  Separator       Lexeme: (
Token:  Identifier      Lexeme: i
Token:  Operator        Lexeme: <
Token:  Identifier      Lexeme: max
Token:  Separator       Lexeme: )
Token:  Separator       Lexeme: {
Token:  Identifier      Lexeme: sum
Token:  Operator        Lexeme: =
Token:  Identifier      Lexeme: sum
Token:  Operator        Lexeme: +
Token:  Identifier      Lexeme: i
Token:  Separator       Lexeme: ;
Token:  Identifier      Lexeme: i
Token:  Operator        Lexeme: =
Token:  Identifier      Lexeme: i
Token:  Operator        Lexeme: +
Token:  Integer         Lexeme: 1
Token:  Separator       Lexeme: ;
Token:  Separator       Lexeme: }
Token:  Identifier      Lexeme: sum
Token:  Operator        Lexeme: =
Token:  Identifier      Lexeme: sum
Token:  Operator        Lexeme: +
Token:  Identifier      Lexeme: max
Token:  Separator       Lexeme: ;